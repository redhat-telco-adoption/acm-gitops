---
# tasks file for openshift-gitops
- name: Create GitOps operator subscription
  kubernetes.core.k8s:
    state: present
    template: subscription.yaml

- name: Wait for GitOps CRDs to exist
  kubernetes.core.k8s_info:
    api_version: "apiextensions.k8s.io/v1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  with_items: 
    - applications.argoproj.io
    - applicationsets.argoproj.io
    - appprojects.argoproj.io
    - argocds.argoproj.io
  register: crds
  until: crds.resources|length > 0
  retries: 30
  delay: 10

- name: Wait for ArgoCD instance to be ready
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1beta1
    kind: ArgoCD
    name: openshift-gitops
    namespace: openshift-gitops
  register: argocd
  until: 
    - argocd.resources | length > 0
    - argocd.resources[0].status is defined
    - argocd.resources[0].status.phase == "Available"
  retries: 30
  delay: 10

- name: Configure RBAC
  kubernetes.core.k8s:
    state: present
    template: rbac.yaml

- name: Add GitHub Secret
  kubernetes.core.k8s:
    state: present
    template: gitops-git-secret.yaml

- name: Patch ArgoCD Resource
  kubernetes.core.k8s_json_patch:
    kind: ArgoCD
    api_version: argoproj.io/v1beta1
    namespace: openshift-gitops
    name: openshift-gitops
    patch:
      - op: add
        path: /spec/extraConfig
        value:
          resource.customizations: |
            operators.coreos.com/Subscription:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = ""
                if obj.status ~= nil then
                  if obj.status.state ~= nil then
                    if obj.status.state == "AtLatestKnown" then
                      hs.message = obj.status.state .. " - " .. obj.status.currentCSV
                      hs.status = "Healthy"
                    end
                  end
                end
                return hs
